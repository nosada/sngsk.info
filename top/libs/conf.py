"""Config parser for app on sngsk.info"""

import configparser
import os


class Conf(object):
    """Read app config and return parameters"""

    def __init__(self):
        """Determine conf path and load cofig
        - args: none
        - returns: none"""

        script_location = os.path.dirname(os.path.abspath(__file__))
        config_location = os.path.join(
            script_location, "..", "config", "sngsk.info.conf")
        self.conf = configparser.ConfigParser(allow_no_value=True)
        self.conf.read(config_location)

    def read_lorem_ipsum_config(self):
        """Get location of word list which is source for
        generating lorem ipsum
        - args: none
        - returns: tuple of (word_list, rate_emphasys)
            - word_list: path of file which contains words used by app
            - rate_emphasys: rate of decorationed words on text generated by
                             app. (this should be described as 'threshold',
                             because this doesn't mean 'rate' of words)
            - base_rate: base rate used to generate Lorem Ipsum sentences,
                         paragraphs and texts"""

        section = "lorem_ipsum"
        word_list = self.conf.get(section, "word_source")
        rate_emphasis = self.conf.get(section, "rate_emphasis")
        base_rate = self.conf.get(section, "base_generation_rate")
        return word_list, rate_emphasis, base_rate

    def read_app_config(self):
        """Return static files location for rendering html
        - args: none
        - returns: tuple of (domain, favicon)
            - domain: domain in str which is used on web site where running app
            - favicon: path of favicon"""

        section = "app"
        domain = self.conf.get(section, "domain")
        favicon = self.conf.get(section, "favicon")
        return domain, favicon

    def get_port_number(self):
        """Return port number using app specified in config
        - args: none
        - returns: port number in int. if not specified in config, return
                   8080"""

        section = "app"
        try:
            port = self.conf.get(section, "port")
            port = int(port)
        except configparser.NoOptionError:
            port = 8080
        return port
